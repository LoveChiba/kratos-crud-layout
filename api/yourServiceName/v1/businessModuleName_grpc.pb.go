// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/yourServiceName/v1/businessModuleName.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BusinessModuleNameClient is the client API for BusinessModuleName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessModuleNameClient interface {
	CreateBusinessModuleName(ctx context.Context, in *CreateBusinessModuleNameRequest, opts ...grpc.CallOption) (*BusinessModuleNameInfoResponse, error)
	UpdateBusinessModuleName(ctx context.Context, in *UpdateBusinessModuleNameRequest, opts ...grpc.CallOption) (*BusinessModuleNameInfoResponse, error)
	DeleteBusinessModuleName(ctx context.Context, in *DeleteBusinessModuleNameRequest, opts ...grpc.CallOption) (*BusinessModuleNameCheckResponse, error)
	GetBusinessModuleName(ctx context.Context, in *GetBusinessModuleNameRequest, opts ...grpc.CallOption) (*BusinessModuleNameInfoResponse, error)
	ListBusinessModuleName(ctx context.Context, in *ListBusinessModuleNameRequest, opts ...grpc.CallOption) (*ListBusinessModuleNameReply, error)
}

type businessModuleNameClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessModuleNameClient(cc grpc.ClientConnInterface) BusinessModuleNameClient {
	return &businessModuleNameClient{cc}
}

func (c *businessModuleNameClient) CreateBusinessModuleName(ctx context.Context, in *CreateBusinessModuleNameRequest, opts ...grpc.CallOption) (*BusinessModuleNameInfoResponse, error) {
	out := new(BusinessModuleNameInfoResponse)
	err := c.cc.Invoke(ctx, "/api.yourServiceName.v1.BusinessModuleName/CreateBusinessModuleName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessModuleNameClient) UpdateBusinessModuleName(ctx context.Context, in *UpdateBusinessModuleNameRequest, opts ...grpc.CallOption) (*BusinessModuleNameInfoResponse, error) {
	out := new(BusinessModuleNameInfoResponse)
	err := c.cc.Invoke(ctx, "/api.yourServiceName.v1.BusinessModuleName/UpdateBusinessModuleName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessModuleNameClient) DeleteBusinessModuleName(ctx context.Context, in *DeleteBusinessModuleNameRequest, opts ...grpc.CallOption) (*BusinessModuleNameCheckResponse, error) {
	out := new(BusinessModuleNameCheckResponse)
	err := c.cc.Invoke(ctx, "/api.yourServiceName.v1.BusinessModuleName/DeleteBusinessModuleName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessModuleNameClient) GetBusinessModuleName(ctx context.Context, in *GetBusinessModuleNameRequest, opts ...grpc.CallOption) (*BusinessModuleNameInfoResponse, error) {
	out := new(BusinessModuleNameInfoResponse)
	err := c.cc.Invoke(ctx, "/api.yourServiceName.v1.BusinessModuleName/GetBusinessModuleName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessModuleNameClient) ListBusinessModuleName(ctx context.Context, in *ListBusinessModuleNameRequest, opts ...grpc.CallOption) (*ListBusinessModuleNameReply, error) {
	out := new(ListBusinessModuleNameReply)
	err := c.cc.Invoke(ctx, "/api.yourServiceName.v1.BusinessModuleName/ListBusinessModuleName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessModuleNameServer is the server API for BusinessModuleName service.
// All implementations must embed UnimplementedBusinessModuleNameServer
// for forward compatibility
type BusinessModuleNameServer interface {
	CreateBusinessModuleName(context.Context, *CreateBusinessModuleNameRequest) (*BusinessModuleNameInfoResponse, error)
	UpdateBusinessModuleName(context.Context, *UpdateBusinessModuleNameRequest) (*BusinessModuleNameInfoResponse, error)
	DeleteBusinessModuleName(context.Context, *DeleteBusinessModuleNameRequest) (*BusinessModuleNameCheckResponse, error)
	GetBusinessModuleName(context.Context, *GetBusinessModuleNameRequest) (*BusinessModuleNameInfoResponse, error)
	ListBusinessModuleName(context.Context, *ListBusinessModuleNameRequest) (*ListBusinessModuleNameReply, error)
	mustEmbedUnimplementedBusinessModuleNameServer()
}

// UnimplementedBusinessModuleNameServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessModuleNameServer struct {
}

func (UnimplementedBusinessModuleNameServer) CreateBusinessModuleName(context.Context, *CreateBusinessModuleNameRequest) (*BusinessModuleNameInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessModuleName not implemented")
}
func (UnimplementedBusinessModuleNameServer) UpdateBusinessModuleName(context.Context, *UpdateBusinessModuleNameRequest) (*BusinessModuleNameInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessModuleName not implemented")
}
func (UnimplementedBusinessModuleNameServer) DeleteBusinessModuleName(context.Context, *DeleteBusinessModuleNameRequest) (*BusinessModuleNameCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessModuleName not implemented")
}
func (UnimplementedBusinessModuleNameServer) GetBusinessModuleName(context.Context, *GetBusinessModuleNameRequest) (*BusinessModuleNameInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessModuleName not implemented")
}
func (UnimplementedBusinessModuleNameServer) ListBusinessModuleName(context.Context, *ListBusinessModuleNameRequest) (*ListBusinessModuleNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessModuleName not implemented")
}
func (UnimplementedBusinessModuleNameServer) mustEmbedUnimplementedBusinessModuleNameServer() {}

// UnsafeBusinessModuleNameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessModuleNameServer will
// result in compilation errors.
type UnsafeBusinessModuleNameServer interface {
	mustEmbedUnimplementedBusinessModuleNameServer()
}

func RegisterBusinessModuleNameServer(s grpc.ServiceRegistrar, srv BusinessModuleNameServer) {
	s.RegisterService(&BusinessModuleName_ServiceDesc, srv)
}

func _BusinessModuleName_CreateBusinessModuleName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessModuleNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessModuleNameServer).CreateBusinessModuleName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.yourServiceName.v1.BusinessModuleName/CreateBusinessModuleName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessModuleNameServer).CreateBusinessModuleName(ctx, req.(*CreateBusinessModuleNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessModuleName_UpdateBusinessModuleName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessModuleNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessModuleNameServer).UpdateBusinessModuleName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.yourServiceName.v1.BusinessModuleName/UpdateBusinessModuleName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessModuleNameServer).UpdateBusinessModuleName(ctx, req.(*UpdateBusinessModuleNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessModuleName_DeleteBusinessModuleName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessModuleNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessModuleNameServer).DeleteBusinessModuleName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.yourServiceName.v1.BusinessModuleName/DeleteBusinessModuleName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessModuleNameServer).DeleteBusinessModuleName(ctx, req.(*DeleteBusinessModuleNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessModuleName_GetBusinessModuleName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessModuleNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessModuleNameServer).GetBusinessModuleName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.yourServiceName.v1.BusinessModuleName/GetBusinessModuleName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessModuleNameServer).GetBusinessModuleName(ctx, req.(*GetBusinessModuleNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessModuleName_ListBusinessModuleName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessModuleNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessModuleNameServer).ListBusinessModuleName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.yourServiceName.v1.BusinessModuleName/ListBusinessModuleName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessModuleNameServer).ListBusinessModuleName(ctx, req.(*ListBusinessModuleNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessModuleName_ServiceDesc is the grpc.ServiceDesc for BusinessModuleName service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessModuleName_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.yourServiceName.v1.BusinessModuleName",
	HandlerType: (*BusinessModuleNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusinessModuleName",
			Handler:    _BusinessModuleName_CreateBusinessModuleName_Handler,
		},
		{
			MethodName: "UpdateBusinessModuleName",
			Handler:    _BusinessModuleName_UpdateBusinessModuleName_Handler,
		},
		{
			MethodName: "DeleteBusinessModuleName",
			Handler:    _BusinessModuleName_DeleteBusinessModuleName_Handler,
		},
		{
			MethodName: "GetBusinessModuleName",
			Handler:    _BusinessModuleName_GetBusinessModuleName_Handler,
		},
		{
			MethodName: "ListBusinessModuleName",
			Handler:    _BusinessModuleName_ListBusinessModuleName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/yourServiceName/v1/businessModuleName.proto",
}
